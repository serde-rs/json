[package]
name = "serde_json"
version = "1.0.32" # remember to update html_root_url
authors = ["Erick Tryzelaar <erick.tryzelaar@gmail.com>", "David Tolnay <dtolnay@gmail.com>"]
license = "MIT/Apache-2.0"
description = "A JSON serialization file format"
repository = "https://github.com/serde-rs/json"
documentation = "http://docs.serde.rs/serde_json/"
keywords = ["json", "serde", "serialization"]
categories = ["encoding"]
readme = "README.md"
include = ["Cargo.toml", "src/**/*.rs", "README.md", "LICENSE-APACHE", "LICENSE-MIT"]
build = "build.rs"

[badges]
travis-ci = { repository = "serde-rs/json" }
appveyor = { repository = "serde-rs/json" }

[dependencies]
serde = "1.0.60"
indexmap = { version = "1.0", optional = true }
itoa = {version= "0.4.3", features = ["std", "i128"]}
ryu = "0.2"

[dev-dependencies]
compiletest_rs = "0.3"
serde_bytes = "0.10"
serde_derive = "1.0"

[package.metadata.docs.rs]
features = ["raw_value"]

[package.metadata.playground]
features = ["raw_value"]


### FEATURES #################################################################

[features]
default = []

# Use a different representation for the map type of serde_json::Value.
# This allows data to be read into a Value and written back to a JSON string
# while preserving the order of map keys in the input.
preserve_order = ["indexmap"]

# Use an arbitrary precision number representation for serde_json::Number. This
# allows JSON numbers of arbitrary size/precision to be read into a Number and
# written back to a JSON string without loss of precision.
arbitrary_precision = []

# Provide a RawValue type that can hold unprocessed JSON during deserialization.
raw_value = []
